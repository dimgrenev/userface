/**
 * –¢–µ—Å—Ç source –≤–µ—Ä—Å–∏–∏ UserFace —Å –Ω–∞—Å—Ç–æ—è—â–∏–º AST-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º
 */

console.log('=== –¢–µ—Å—Ç Source –≤–µ—Ä—Å–∏–∏ UserFace ===');

try {
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º source –≤–µ—Ä—Å–∏—é
  const { realASTAnalyzer, astAnalyzer } = require('./src/index.ts');
  
  console.log('‚úÖ Source –≤–µ—Ä—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  console.log('‚úÖ AST-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω:', !!realASTAnalyzer);
  console.log('‚úÖ astAnalyzer –¥–æ—Å—Ç—É–ø–µ–Ω:', !!astAnalyzer);

  // –¢–µ—Å—Ç–æ–≤—ã–π React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  const reactComponent = {
    code: `
import React from 'react';

interface ButtonProps {
  text: string;
  onClick?: () => void;
  disabled?: boolean;
}

export const Button: React.FC<ButtonProps> = ({ text, onClick, disabled = false }) => {
  return (
    <button onClick={onClick} disabled={disabled}>
      {text}
    </button>
  );
};
    `
  };

  console.log('\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç...');
  const result = realASTAnalyzer.analyzeComponent(reactComponent, 'Button');
  
  console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:');
  console.log(JSON.stringify(result, null, 2));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π AST-–∞–Ω–∞–ª–∏–∑
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞...');
  console.log('‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞:', result.detectedPlatform);
  console.log('‚úÖ –ü—Ä–æ–ø—Å—ã –Ω–∞–π–¥–µ–Ω—ã:', result.props.length);
  console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –Ω–∞–π–¥–µ–Ω—ã:', result.events.length);
  
  if (result.props.length > 0) {
    console.log('‚úÖ –ü–µ—Ä–≤—ã–π –ø—Ä–æ–ø:', result.props[0]);
  }

  console.log('\nüéâ Source –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–∞—Å—Ç–æ—è—â–∏–º AST-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º!');

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ source –≤–µ—Ä—Å–∏–∏:', error);
  console.error('Stack:', error.stack);
} 