#!/usr/bin/env tsx

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

const log = {
  info: (msg: string) => console.log(`${colors.blue}‚ÑπÔ∏è  ${msg}${colors.reset}`),
  success: (msg: string) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  warning: (msg: string) => console.log(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`),
  error: (msg: string) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  step: (msg: string) => console.log(`${colors.cyan}üîß ${msg}${colors.reset}`)
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
const checkFiles = () => {
  const requiredFiles = [
    'package.json',
    'tsconfig.json',
    'vite.config.ts',
    'src/core/reestr.ts'
  ];

  for (const file of requiredFiles) {
    if (!fs.existsSync(file)) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${file}`);
    }
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ä–µ–µ—Å—Ç—Ä–∞
const checkRegistryCoverage = () => {
  log.step('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ä–µ–µ—Å—Ç—Ä–∞...');
  
  try {
    execSync('npm run check-registry', { stdio: 'inherit' });
    log.success('–ü–æ–∫—Ä—ã—Ç–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ');
  } catch (error) {
    log.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è —Ä–µ–µ—Å—Ç—Ä–∞');
    throw error;
  }
};



// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
const runTests = () => {
  log.step('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');
  
  try {
    execSync('npm run test', { stdio: 'inherit' });
    log.success('–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    log.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤');
    throw error;
  }
};

// –õ–∏–Ω—Ç–∏–Ω–≥ –∫–æ–¥–∞
const runLint = () => {
  log.step('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞...');
  
  try {
    execSync('npm run lint', { stdio: 'inherit' });
    log.success('–õ–∏–Ω—Ç–∏–Ω–≥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    log.error('–û—à–∏–±–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞');
    throw error;
  }
};

// –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
const buildProject = () => {
  log.step('–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...');
  
  try {
    execSync('npm run build', { stdio: 'inherit' });
    log.success('–ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    log.error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞');
    throw error;
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏
const checkBuild = () => {
  log.step('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏...');
  
  const distFiles = [
    'dist/index.js',
    'dist/index.esm.js',
    'dist/index.d.ts'
  ];

  for (const file of distFiles) {
    if (!fs.existsSync(file)) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª —Å–±–æ—Ä–∫–∏: ${file}`);
    }
  }
  
  log.success('–°–±–æ—Ä–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
};

// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
const publishPackage = (dryRun: boolean = true) => {
  log.step(`${dryRun ? '–¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è' : '–ü—É–±–ª–∏–∫–∞—Ü–∏—è'} –ø–∞–∫–µ—Ç–∞...`);
  
  try {
    const command = dryRun ? 'npm publish --dry-run' : 'npm publish';
    execSync(command, { stdio: 'inherit' });
    log.success(`${dryRun ? '–¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è' : '–ü—É–±–ª–∏–∫–∞—Ü–∏—è'} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ`);
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ ${dryRun ? '—Ç–µ—Å—Ç–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏' : '–ø—É–±–ª–∏–∫–∞—Ü–∏–∏'}`);
    throw error;
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  const startTime = Date.now();
  
  try {
    log.info('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ–ª–∏–∑–∞ UserEngine');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    checkFiles();
    
    // –≠—Ç–∞–ø—ã —Ä–µ–ª–∏–∑–∞
    checkRegistryCoverage();
    runTests();
    runLint();
    buildProject();
    checkBuild();
    
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    const args = process.argv.slice(2);
    const shouldPublish = args.includes('--publish');
    const dryRun = args.includes('--dry-run');
    
    if (shouldPublish || dryRun) {
      publishPackage(dryRun);
    } else {
      log.warning('–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --publish –∏–ª–∏ --dry-run');
    }
    
    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);
    
    log.success(`üéâ –†–µ–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}—Å`);
    
  } catch (error) {
    log.error(`üí• –û—à–∏–±–∫–∞ —Ä–µ–ª–∏–∑–∞: ${error.message}`);
    process.exit(1);
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const showHelp = () => {
  console.log(`
${colors.bright}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${colors.reset}
  npm run release [–æ–ø—Ü–∏–∏]

${colors.bright}–û–ø—Ü–∏–∏:${colors.reset}
  --publish     –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç –≤ npm
  --dry-run     –¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  --help        –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

${colors.bright}–ü—Ä–∏–º–µ—Ä—ã:${colors.reset}
  npm run release              # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  npm run release --dry-run    # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª + —Ç–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
  npm run release --publish    # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª + —Ä–µ–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
`);
};

if (process.argv.includes('--help')) {
  showHelp();
  process.exit(0);
}

if (require.main === module) {
  main();
}

export { main as release }; 