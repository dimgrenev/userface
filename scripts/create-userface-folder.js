#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É userface –≤ –ø—Ä–æ–µ–∫—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function createUserfaceFolder() {
  const projectRoot = process.cwd();
  const userfacePath = path.join(projectRoot, 'userface');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(userfacePath)) {
      fs.mkdirSync(userfacePath, { recursive: true });
      console.log('‚úÖ Created userface folder');
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É library
    const libraryPath = path.join(userfacePath, 'library');
    if (!fs.existsSync(libraryPath)) {
      fs.mkdirSync(libraryPath, { recursive: true });
      console.log('‚úÖ Created userface/library folder');
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É project
    const projectPath = path.join(userfacePath, 'project');
    if (!fs.existsSync(projectPath)) {
      fs.mkdirSync(projectPath, { recursive: true });
      console.log('‚úÖ Created userface/project folder');
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É pages
    const pagesPath = path.join(projectPath, 'pages');
    if (!fs.existsSync(pagesPath)) {
      fs.mkdirSync(pagesPath, { recursive: true });
      console.log('‚úÖ Created userface/project/pages folder');
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É components
    const componentsPath = path.join(projectPath, 'components');
    if (!fs.existsSync(componentsPath)) {
      fs.mkdirSync(componentsPath, { recursive: true });
      console.log('‚úÖ Created userface/project/components folder');
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É modals
    const modalsPath = path.join(componentsPath, 'modals');
    if (!fs.existsSync(modalsPath)) {
      fs.mkdirSync(modalsPath, { recursive: true });
      console.log('‚úÖ Created userface/project/components/modals folder');
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É scenarios
    const scenariosPath = path.join(componentsPath, 'scenarios');
    if (!fs.existsSync(scenariosPath)) {
      fs.mkdirSync(scenariosPath, { recursive: true });
      console.log('‚úÖ Created userface/project/components/scenarios folder');
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const examplePage = `import React from 'react';

export const ExamplePage = () => (
  <div style={{ padding: '20px' }}>
    <h1>Example Page</h1>
    <p>This is an example page for your project.</p>
    <p>Add your pages to userface/project/pages/ and export them in index.ts</p>
  </div>
);
`;
    
    const examplePagePath = path.join(pagesPath, 'example.tsx');
    if (!fs.existsSync(examplePagePath)) {
      fs.writeFileSync(examplePagePath, examplePage);
      console.log('‚úÖ Created example page');
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const exampleComponent = `import React from 'react';

export const ExampleButton = ({ text, onClick }) => (
  <button onClick={onClick} style={{ padding: '8px 16px', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '4px' }}>
    {text}
  </button>
);

export const ExampleInput = ({ value, onChange, placeholder }) => (
  <input 
    value={value} 
    onChange={onChange} 
    placeholder={placeholder}
    style={{ padding: '8px', border: '1px solid #ccc', borderRadius: '4px' }}
  />
);
`;
    
    const exampleComponentPath = path.join(componentsPath, 'example.tsx');
    if (!fs.existsSync(exampleComponentPath)) {
      fs.writeFileSync(exampleComponentPath, exampleComponent);
      console.log('‚úÖ Created example component');
    }
    
    // –°–æ–∑–¥–∞–µ–º index.ts –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
    const pagesIndexContent = `// Auto-generated by userface
// Add your pages here

export * from './example';
`;
    
    const pagesIndexPath = path.join(pagesPath, 'index.ts');
    if (!fs.existsSync(pagesIndexPath)) {
      fs.writeFileSync(pagesIndexPath, pagesIndexContent);
      console.log('‚úÖ Created pages index');
    }
    
    // –°–æ–∑–¥–∞–µ–º index.ts –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const componentsIndexContent = `// Auto-generated by userface
// Add your components here

export * from './example';
`;
    
    const componentsIndexPath = path.join(componentsPath, 'index.ts');
    if (!fs.existsSync(componentsIndexPath)) {
      fs.writeFileSync(componentsIndexPath, componentsIndexContent);
      console.log('‚úÖ Created components index');
    }
    
    // –°–æ–∑–¥–∞–µ–º index.ts –¥–ª—è –º–æ–¥–∞–ª–æ–∫
    const modalsIndexContent = `// Auto-generated by userface
// Add your modals here

// Example:
// export { ConfirmModal } from './ConfirmModal';
// export { ProductModal } from './ProductModal';
`;
    
    const modalsIndexPath = path.join(modalsPath, 'index.ts');
    if (!fs.existsSync(modalsIndexPath)) {
      fs.writeFileSync(modalsIndexPath, modalsIndexContent);
      console.log('‚úÖ Created modals index');
    }
    
    // –°–æ–∑–¥–∞–µ–º index.ts –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    const scenariosIndexContent = `// Auto-generated by userface
// Add your scenarios here

// Example:
// export { CheckoutFlow } from './CheckoutFlow';
// export { UserOnboarding } from './UserOnboarding';
`;
    
    const scenariosIndexPath = path.join(scenariosPath, 'index.ts');
    if (!fs.existsSync(scenariosIndexPath)) {
      fs.writeFileSync(scenariosIndexPath, scenariosIndexContent);
      console.log('‚úÖ Created scenarios index');
    }
    
    // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π index.ts –¥–ª—è project
    const projectIndexContent = `// Auto-generated by userface
// Main export for project-specific components and pages

export * from './pages';
export * from './components';
`;
    
    const projectIndexPath = path.join(projectPath, 'index.ts');
    if (!fs.existsSync(projectIndexPath)) {
      fs.writeFileSync(projectIndexPath, projectIndexContent);
      console.log('‚úÖ Created project index');
    }
    
    console.log('üéâ Userface folder setup complete!');
    console.log('üìÅ Structure created:');
    console.log('   userface/');
    console.log('   ‚îú‚îÄ‚îÄ library/          # For component libraries');
    console.log('   ‚îî‚îÄ‚îÄ project/');
    console.log('       ‚îú‚îÄ‚îÄ pages/        # Your application pages');
    console.log('       ‚îî‚îÄ‚îÄ components/   # Project-specific components');
    console.log('           ‚îú‚îÄ‚îÄ modals/   # Modal components');
    console.log('           ‚îî‚îÄ‚îÄ scenarios/ # Complex scenarios');
    console.log('');
    console.log('üìù Next steps:');
    console.log('   1. Add your components to userface/project/components/');
    console.log('   2. Add your pages to userface/project/pages/');
    console.log('   3. Import userface in your main app file');
    
  } catch (error) {
    console.error('‚ùå Failed to create userface folder:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  createUserfaceFolder();
}

module.exports = { createUserfaceFolder }; 