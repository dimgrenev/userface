console.log('=== –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ ts-morph ===');

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –±–µ–∑ ts-morph
function analyzeComponentSimple(code, name) {
  console.log('[MINIMAL] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:', name);
  
  // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
  const props = [];
  const events = [];
  let platform = 'universal';
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  if (code.includes('React') || code.includes('react')) {
    platform = 'react';
  } else if (code.includes('Vue') || code.includes('vue')) {
    platform = 'vue';
  } else if (code.includes('Angular') || code.includes('angular')) {
    platform = 'angular';
  } else if (code.includes('Svelte') || code.includes('svelte')) {
    platform = 'svelte';
  }
  
  // –ò—â–µ–º –ø—Ä–æ–ø—Å—ã (–æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ)
  const propMatches = code.match(/interface\s+\w+Props\s*\{([^}]+)\}/g);
  if (propMatches) {
    propMatches.forEach(match => {
      const propContent = match.match(/\{([^}]+)\}/)[1];
      const propLines = propContent.split('\n');
      propLines.forEach(line => {
        const propMatch = line.match(/(\w+)\s*\?*\s*:\s*([^;]+)/);
        if (propMatch) {
          props.push({
            name: propMatch[1].trim(),
            type: propMatch[2].trim(),
            required: !line.includes('?')
          });
        }
      });
    });
  }
  
  // –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è (–æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ)
  const eventMatches = code.match(/onClick|onChange|onSubmit|onInput/g);
  if (eventMatches) {
    eventMatches.forEach(event => {
      events.push({
        name: event,
        type: 'function'
      });
    });
  }
  
  return {
    name,
    detectedPlatform: platform,
    props,
    events
  };
}

// –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
const testComponent = {
  name: 'TestButton',
  code: `
import React from 'react';

interface TestButtonProps {
  text: string;
  onClick?: () => void;
  disabled?: boolean;
}

const TestButton: React.FC<TestButtonProps> = ({ text, onClick, disabled = false }) => {
  return (
    <button onClick={onClick} disabled={disabled}>
      {text}
    </button>
  );
};

export default TestButton;
`
};

try {
  console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...');
  const result = analyzeComponentSimple(testComponent.code, testComponent.name);
  
  console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:');
  console.log('- –ò–º—è:', result.name);
  console.log('- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', result.detectedPlatform);
  console.log('- –ü—Ä–æ–ø—Å—ã:', result.props.length);
  console.log('- –°–æ–±—ã—Ç–∏—è:', result.events.length);
  
  console.log('\nüìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–ø—Å–æ–≤:');
  result.props.forEach(prop => {
    console.log(`  - ${prop.name}: ${prop.type}${prop.required ? '' : ' (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)'}`);
  });
  
  console.log('\nüéØ –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏–π:');
  result.events.forEach(event => {
    console.log(`  - ${event.name}: ${event.type}`);
  });
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ:', error.message);
  console.error('Stack:', error.stack);
} 